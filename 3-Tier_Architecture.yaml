Parameters:
  NumberOfAZs:
    Type: Number
    AllowedValues:
    - 1
    - 2
    - 3
    - 4
    Default: 2
    Description:  How many Availability Zones do you wish to utilize?

  PrivateSubnets:
    Type: String
    AllowedValues:
    - True
    - False
    Default: True
    Description: Do you want to create private subnets in addition to public subnets?

Conditions:
  BuildPublicB:         !Not [ !Equals [ !Ref NumberOfAZs, 1 ]] 
  BuildPublicC:         !Not [ !Equals [ !Ref NumberOfAZs, 2 ]] 
  BuildPublicD:         !Equals [ !Ref NumberOfAZs, 4 ] 
  BuildPrivateSubnets: !Equals [ !Ref PrivateSubnets, True ]
  BuildPrivateA:       !Equals [ !Ref PrivateSubnets, True ]
  BuildPrivateB:       !And [ !Not [ !Equals [ !Ref NumberOfAZs,1 ] ],!Equals [ !Ref PrivateSubnets,True ] ]
  BuildPrivateC:       !And [ !Equals [ !Ref NumberOfAZs,3], !Equals [ !Ref PrivateSubnets, True]]
  BuildPrivateD:       !And [ !Equals [ !Ref NumberOfAZs,4], !Equals [ !Ref PrivateSubnets, True]]

Resources:
  Production:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: Production

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Production
      InternetGatewayId: !Ref InternetGateway

  Public_Subnet_A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !ref Production
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ] 

  Public_Subnet_B:
    Type: AWS::EC2::Subnet
    Condition: BuildPublicB
    Properties:
      VpcId: !ref Production
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ] 

  Public_Subnet_C:
    Type: AWS::EC2::Subnet
    Condition: BuildPublicC
    Properties:
      VpcId: !ref Production
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [ 2, !GetAZs ] 

  Public_Subnet_D:
    Type: AWS::EC2::Subnet
    Condition: BuildPublicD
    Properties:
      VpcId: !ref Production
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [ 3, !GetAZs ] 

  Private_Subnet_A:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivateA
    Properties:
      VpcId: !ref Production
      CidrBlock: 10.0.10.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ] 

  Private_Subnet_B:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivateB
    Properties:
      VpcId: !ref Production
      CidrBlock: 10.0.11.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ] 

  Private_Subnet_C:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivateC
    Properties:
      VpcId: !ref Production
      CidrBlock: 10.0.12.0/24
      AvailabilityZone: !Select [ 2, !GetAZs ] 

  Private_Subnet_D:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivateD
    Properties:
      VpcId: !ref Production
      CidrBlock: 10.0.13.0/24
      AvailabilityZone: !Select [ 3, !GetAZs ] 

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Production
  
  PublicRoute:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Here is a private route table:
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: BuildPrivateSubnets
    Properties:
      VpcId: !Ref Production

  
  PrivateRoute:            # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    Condition: BuildPrivateSubnets
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      # Route traffic through the NAT Gateway:
      NatGatewayId: !Ref NATGateway

 # A NAT Gateway:
  NATGateway:
    Type: AWS::EC2::NatGateway
    Condition: BuildPrivateSubnets
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnetA

  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Condition: BuildPrivateSubnets
    Properties:
      Domain: VPC

# Attach the public subnets to public route tables,
  # and attach the private subnets to private route tables:   
  Public_Subnet_A_RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Public_Subnet_A
      RouteTableId: !Ref PublicRouteTable

  Public_Subnet_B_RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Public_Subnet_B
      RouteTableId: !Ref PublicRouteTable

  Public_Subnet_C_RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Public_Subnet_C
      RouteTableId: !Ref PublicRouteTable

  Public_Subnet_D_RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Public_Subnet_D
      RouteTableId: !Ref PublicRouteTable

  Private_Subnet_A_RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivateA
    Properties:
      SubnetId: !Ref Private_Subnet_A
      RouteTableId: !Ref PrivateRouteTable

  Private_Subnet_B_RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivateB
    Properties:
      SubnetId: !Ref Private_Subnet_B
      RouteTableId: !Ref PrivateRouteTable

  Private_Subnet_C_RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivateC
    Properties:
      SubnetId: !Ref Private_Subnet_C
      RouteTableId: !Ref PrivateRouteTable

  Private_Subnet_D_RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivateD
    Properties:
      SubnetId: !Ref Private_Subnet_D
      RouteTableId: !Ref PrivateRouteTable