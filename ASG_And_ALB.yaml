AWSTemplateFormatVersion: 2010-09-09



##########################################################################################################
##########################################################################################################
##########################################################################################################
##########################################################################################################


Parameters:
  #There are Four different Paramenters:
  #pick number of AZs for the public subnets
  #Picking Autoscaling Group Settings: Maximum and Minimum instances
  #Pick Instance Type


#TODOS: Multiple ELB
  NumberOfAZs:
    Type: Number
    AllowedValues:
    - 1
    - 2
    - 3
    - 4
    Default: 2
    Description:  How many Availability Zones do you wish to utilize?
  
  MinimumAmountOfInstances:
    Type: Number
    Default: 1
    Description: Minimum number Of Instances running?
  
  MaximumAmountOfInstances:
    Type: Number
    Default: 4
    Description: Maximum number of Instances running?
  
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t1.micro, t2.nano, t2.micro, t2.small, t2.medium, t2.large, m1.small,
      m1.medium, m1.large, m1.xlarge, m2.xlarge, m2.2xlarge, m2.4xlarge, m3.medium,
      m3.large, m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge,
      m4.10xlarge, c1.medium, c1.xlarge, c3.large, c3.xlarge, c3.2xlarge, c3.4xlarge,
      c3.8xlarge, c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, g2.2xlarge,
      g2.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge, r3.8xlarge, i2.xlarge,
      i2.2xlarge, i2.4xlarge, i2.8xlarge, d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge,
      hi1.4xlarge, hs1.8xlarge, cr1.8xlarge, cc2.8xlarge, cg1.4xlarge]
    ConstraintDescription: must be a valid EC2 instance type.





##########################################################################################################
##########################################################################################################


#Mappings help with picking AMI depending on the region

Mappings:
  RegionMap:
    'eu-north-1':
      AMI: 'ami-0c947472aff72870d'
    'ap-south-1':
      AMI: 'ami-040c7ad0a93be494e'
    'eu-west-3':
      AMI: 'ami-05a51ff00c1d77571'
    'eu-west-2':
      AMI: 'ami-00e8b55a2e841be44'
    'eu-west-1':
      AMI: 'ami-040ba9174949f6de4'
    'ap-northeast-2':
      AMI: 'ami-02b3330196502d247'
    'me-south-1':
      AMI: 'ami-0207e6a966ca96048'
    'ap-northeast-1':
      AMI: 'ami-0064e711cbc7a825e'
    'sa-east-1':
      AMI: 'ami-053f8b6627112b46e'
    'ca-central-1':
      AMI: 'ami-007dbcbce3118978b'
    'ap-east-1':
      AMI: 'ami-ff4d378e'
    'ap-southeast-1':
      AMI: 'ami-00942d7cd4f3ca5c0'
    'ap-southeast-2':
      AMI: 'ami-08a74056dfd30c986'
    'eu-central-1':
      AMI: 'ami-0f3a43fbf2d3899f7'
    'us-east-1':
      AMI: 'ami-00dc79254d0461090'
    'us-east-2':
      AMI: 'ami-00bf61217e296b409'
    'us-west-1':
      AMI: 'ami-024c80694b5b3e51a'
    'us-west-2':
      AMI: 'ami-0a85857bfc5345c38'

#Conditions used to determine wether or not to build specific Resources


##########################################################################################################
##########################################################################################################


Conditions:
  BuildPublicB:         !Not [ !Equals [ !Ref NumberOfAZs, 1 ]] 
  BuildPublicC:        !And [ !Not [ !Equals [ !Ref NumberOfAZs, 2 ]],!Not [ !Equals [ !Ref NumberOfAZs, 1 ]]] 
  BuildPublicD:         !Equals [ !Ref NumberOfAZs, 4 ]


##########################################################################################################
##########################################################################################################

Resources:
  #Creating VPC, IG and attaching IG to VPC
  Production:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
  
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: Production

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Production
      InternetGatewayId: !Ref InternetGateway

##########################################################################################################
##########################################################################################################


#Creating Public Subnets based on conditions and the parameters
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Production
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ] 
  
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Condition: BuildPublicB
    Properties:
      VpcId: !Ref Production
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ] 
  
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Condition: BuildPublicC
    Properties:
      VpcId: !Ref Production
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [ 2, !GetAZs ] 

  PublicSubnetD:
    Type: AWS::EC2::Subnet
    Condition: BuildPublicD
    Properties:
      VpcId: !Ref Production
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [ 3, !GetAZs ] 

  PublicSubnetALBA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Production
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]



##########################################################################################################
##########################################################################################################


#Creating a RT with a route to the IG for public Access
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Production
  
  PublicRoute:   
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway


# Attach the public subnets to public route tables,
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPublicB
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPublicC
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetDRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPublicD
    Properties:
      SubnetId: !Ref PublicSubnetD
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetALBARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetALBA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetALBBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPublicALBB
    Properties:
      SubnetId: !Ref PublicSubnetALBB
      RouteTableId: !Ref PublicRouteTable

##########################################################################################################
##########################################################################################################

#This Section I will be Creating Security Groups for the ALB and ASG instances
# We need 2 SGs 1 is for the ELBs and one for the ASG instances
  
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: This Security Group is for the ALB and allows HTTP Traffic
      GroupName: ALBSecurityGroup
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId: !Ref Production

  ASGInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: ALBSecurityGroup
    Properties: 
      GroupDescription: This Security Group is for the ASG instances and only allows traffic from ALB SG
      GroupName: ASGInstanceSecurityGroup
      SecurityGroupIngress: 
        - SourceSecurityGroupId: !Ref ALBSecurityGroup
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId: !Ref Production


##########################################################################################################
##########################################################################################################

#This section creates Target group, ALB and ALB Listener
  EC2TargetGroup: 
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      Name: TargetGroupForALB
      Port: 80
      Protocol: HTTP
      VpcId: !Ref Production
      TargetType: instance

  ApplicationLoadBalancerA:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      Name: taquiytservices-ALB-A
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets: 
        - !Ref PublicSubnetA
        - !If [BuildPublicB, !Ref PublicSubnetB,!Ref "AWS::NoValue"]
        - !If [BuildPublicC, !Ref PublicSubnetC,!Ref "AWS::NoValue"]
        - !If [BuildPublicD, !Ref PublicSubnetD,!Ref "AWS::NoValue"]
      Type: application

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref EC2TargetGroup 
          Type: forward    
      LoadBalancerArn: !Ref ApplicationLoadBalancerA
      Port: 80
      Protocol: HTTP


##########################################################################################################
##########################################################################################################


#In this section I create a LaunchConfiguration and Autoscaling Group
#I refer to the ELB and make sure that the health checks are performed by the ELB
#The user data is used to see the instances and make sure that there are multiple instances online in the target group
# By refreshing the ELB DNSName I check if I get different names on the webpages. That confirms that the traffic is load balanced
  ASGLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      AssociatePublicIpAddress: True #TODO: kanske ta bort?
      #IamInstanceProfile: String ## TODO: specific Role for EC2 instances?
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI ] #fixa så att man kan välja
      InstanceMonitoring: False
      InstanceType: !Ref InstanceType # fixa så att man kan välja
      #KernelId: String
      #KeyName: String # need to check this
      LaunchConfigurationName: taquiytservices-ALBLaunchConfiguration
      PlacementTenancy: default
      SecurityGroups: 
        - !Ref ASGInstanceSecurityGroup
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo su
          yum update -y
          yum install -y httpd.x86_64
          systemctl start httpd.service
          systemctl enable httpd.service
          echo "Hello World from $(hostname -f)" > /var/www/html/index.html


  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: EC2TargetGroup
    Properties:
      AutoScalingGroupName: taquiyt-services-ASG
      VPCZoneIdentifier: 
        - !Ref PublicSubnetA
        - !If [BuildPublicB, !Ref PublicSubnetB ,!Ref "AWS::NoValue"]
        - !If [BuildPublicC, !Ref PublicSubnetC ,!Ref "AWS::NoValue"]
        - !If [BuildPublicD, !Ref PublicSubnetD ,!Ref "AWS::NoValue"]
      Cooldown: 300
      HealthCheckGracePeriod: 60
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref ASGLaunchConfiguration # kolla in på detta
      MaxSize: !Ref MaximumAmountOfInstances
      MinSize: !Ref MinimumAmountOfInstances
      TargetGroupARNs: 
        - !Ref EC2TargetGroup

##########################################################################################################
##########################################################################################################

# In this section I select the output of the ALB DNS name since it is the only thing needed to test that the entire system worked.



Outputs:
  BackupLoadBalancerDNSName:
    Description: The DNSName of the backup load balancer
    Value: !GetAtt ApplicationLoadBalancerA.DNSName
